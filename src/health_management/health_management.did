type Diagnosis = record {
  id : nat64;
  patient_id : nat64;
  medication : text;
  treatment : text;
  doctor_id : nat64;
};
type DiagnosisPayload = record {
  patient_id : nat64;
  medication : text;
  treatment : text;
  doctor_id : nat64;
};
type Doctor = record {
  id : nat64;
  current_patient : nat64;
  name : text;
  speciality : text;
  email : text;
  phone_number : text;
};
type DoctorPayLoad = record {
  name : text;
  speciality : text;
  email : text;
  phone_number : text;
};
type Error = variant {
  CanNotAssign : record { msg : text };
  EmptyFields : record { msg : text };
  NotFound : record { msg : text };
  AlreadyAssigned : record { msg : text };
};
type Patient = record {
  id : nat64;
  age : nat32;
  name : text;
  email : text;
  kins_phone_number : text;
  ethncity : text;
  address : text;
  gender : text;
  date_of_birth : text;
  phone_number : text;
  registered_on : nat64;
  next_of_kin : text;
};
type PatientPayLoad = record {
  age : nat32;
  name : text;
  email : text;
  kins_phone_number : text;
  ethncity : text;
  address : text;
  gender : text;
  date_of_birth : text;
  phone_number : text;
  next_of_kin : text;
};
type Result = variant { Ok : Diagnosis; Err : Error };
type Result_1 = variant { Ok : Doctor; Err : Error };
type Result_2 = variant { Ok : Patient; Err : Error };
type Result_3 = variant { Ok : Room; Err : Error };
type Result_4 = variant { Ok; Err : Error };
type Room = record {
  id : nat64;
  current_doctor_id : nat64;
  equipment : vec text;
  name : text;
  location : text;
};
type RoomPayload = record { name : text; location : text };
service : {
  add_diagnosis : (DiagnosisPayload) -> (Result);
  add_doctor : (DoctorPayLoad) -> (Result_1);
  add_patient : (PatientPayLoad) -> (Result_2);
  add_room : (RoomPayload) -> (Result_3);
  assign_doctor_a_room : (nat64, nat64) -> (Result_4);
  assign_patient_a_doctor : (nat64, nat64) -> (Result_4);
  clear_current_patient : (nat64) -> (Result_1);
  delete_doctor : (nat64) -> (Result_4);
  delete_patient : (nat64) -> (Result_4);
  delete_room : (nat64) -> (Result_4);
  get_all_patients : () -> (vec Patient) query;
  get_doctor : (nat64) -> (Result_1) query;
  get_patient : (nat64) -> (Result_2) query;
  get_room : (nat64) -> (Result_3) query;
  update_doctor : (nat64, DoctorPayLoad) -> (Result_1);
  update_patient : (nat64, PatientPayLoad) -> (Result_2);
  update_room : (nat64, RoomPayload) -> (Result_3);
  update_room_equipment : (nat64, vec text) -> (Result_4);
}
