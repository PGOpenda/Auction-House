type Doctor = record {
  id : nat64;
  current_patient : nat64;
  name : text;
  speciality : text;
  email : text;
  phone_number : text;
};
type DoctorPayLoad = record {
  name : text;
  speciality : text;
  email : text;
  phone_number : text;
};
type Error = variant {
  EmptyFields : record { msg : text };
  NotFound : record { msg : text };
};
type Patient = record {
  id : nat64;
  name : text;
  email : text;
  kins_phone_number : text;
  ethncity : text;
  address : text;
  gender : text;
  date_of_birth : text;
  phone_number : text;
  registered_on : nat64;
  next_of_kin : text;
};
type PatientPayLoad = record {
  name : text;
  email : text;
  kins_phone_number : text;
  ethncity : text;
  address : text;
  gender : text;
  date_of_birth : text;
  phone_number : text;
  next_of_kin : text;
};
type Result = variant { Ok : Doctor; Err : Error };
type Result_1 = variant { Ok : Patient; Err : Error };
type Result_2 = variant { Ok : Room; Err : Error };
type Result_3 = variant { Ok; Err : Error };
type Room = record {
  id : nat64;
  current_doctor_id : nat64;
  equipment : vec text;
  name : text;
  location : text;
};
type RoomPayload = record {
  current_doctor_id : nat64;
  name : text;
  location : text;
};
service : {
  add_doctor : (DoctorPayLoad) -> (Result);
  add_patient : (PatientPayLoad) -> (Result_1);
  add_room : (RoomPayload) -> (Result_2);
  delete_classroom : (nat64) -> (Result_3);
  delete_doctor : (nat64) -> (Result_3);
  delete_patient : (nat64) -> (Result_3);
  get_doctor : (nat64) -> (Result) query;
  get_patient : (nat64) -> (Result_1) query;
  get_room : (nat64) -> (Result_2) query;
  update_doctor : (nat64, DoctorPayLoad) -> (Result);
  update_patient : (nat64, PatientPayLoad) -> (Result_1);
  update_room : (nat64, RoomPayload) -> (Result_2);
}
